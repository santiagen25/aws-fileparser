service: fileparser

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 512
  stage: ${opt:stage, "dev"}
  region: eu-west-1
  deploymentBucket:
    name: fileparser-deployment-bucket
  environment: 
    BUCKET_NAME: ${self:custom.readBucketName}
    WRITE_BUCKET_NAME: ${self:custom.writeBucketName}
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource:
            - arn:aws:s3:::${self:custom.readBucketName}/*
            - arn:aws:s3:::${self:custom.readBucketName}
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource:
            - arn:aws:s3:::${self:custom.writeBucketName}/*
            - arn:aws:s3:::${self:custom.writeBucketName}
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/*"

functions:
  countLines:
    handler: handler.countLines
    events:
      - http:
          path: countlines/{url}
          method: get
          request:
            parameters:
              paths:
                url: true

  countWordsS3:
    handler: handler.countWordsS3
    events:
      - http:
          path: countWordsS3/{fileName}
          method: get
          request:
            parameters:
              paths:
                fileName: true

  countLinesFromS3:
    handler: handler.countLinesFromS3
    events:
      - s3:
          bucket: ${self:custom.readBucketName}
          event: s3:ObjectCreated:*
          existing: true

custom:
  yourName: "santi-torrabadella"
  readBucketName: "${self:custom.yourName}-fabulous-read-bucket-${self:provider.stage}"
  writeBucketName: "${self:custom.yourName}-fabulous-write-bucket-${self:provider.stage}"
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true


resources:
  Resources:
    readBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.readBucketName}

    writeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.writeBucketName}

package:
  patterns:
    - "!aws/**"
    - "!awscliv2.zip"
    - "!__tests__/**"
    - "!jest.config.js"
    - "!test-file.txt"


layers:
  commonDependencies:
    path: layers
